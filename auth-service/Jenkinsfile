pipeline {
    agent any

    tools {
        maven 'maven_3_9_6'
    }

    environment {
        DOCKERHUB_USER = 'dixitkasodariya'
        IMAGE_NAME = 'auth-service'
    }

    stages {
        stage('Checkout Code') {
            steps {
                // Pull the latest code from GitHub (auth-service branch)
                checkout scmGit(
                    branches: [[name: '*/feature/auth-service']],
                    userRemoteConfigs: [[url: 'https://github.com/dixitkasodariya2244/Smart-Room-Booking-Platform']]
                )
            }
        }

        stage('Build with Maven') {
            steps {
                echo 'üîß Building project with Maven...'
                bat 'cd auth-service && mvn clean package -DskipTests'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo 'üê≥ Building Docker image...'
                    def imageTag = "v${env.BUILD_NUMBER}"
                    bat "cd auth-service && docker build -t ${DOCKERHUB_USER}/${IMAGE_NAME}:${imageTag} ."
                    bat "docker tag ${DOCKERHUB_USER}/${IMAGE_NAME}:${imageTag} ${DOCKERHUB_USER}/${IMAGE_NAME}:latest"
                }
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    echo 'üì§ Pushing image to Docker Hub...'
                    withCredentials([string(credentialsId: 'dockerhub-pwd', variable: 'DOCKERHUB_PASS')]) {
                        bat "docker login -u ${DOCKERHUB_USER} -p %DOCKERHUB_PASS%"
                        def imageTag = "v${env.BUILD_NUMBER}"
                        bat "docker push ${DOCKERHUB_USER}/${IMAGE_NAME}:${imageTag}"
                        bat "docker push ${DOCKERHUB_USER}/${IMAGE_NAME}:latest"
                    }
                }
            }
        }

        stage('Tag Git Version') {
            steps {
                script {
                    echo 'üè∑Ô∏è Tagging version in Git...'
                    bat """
                        git config user.name "Jenkins CI"
                        git config user.email "jenkins@example.com"
                        git tag -a v${BUILD_NUMBER} -m "Build v${BUILD_NUMBER}"
                        git push origin v${BUILD_NUMBER}
                    """
                }
            }
        }

    post {
        success {
            echo '‚úÖ Build and Push completed successfully!'
        }
        failure {
            echo '‚ùå Build failed! Check logs for errors.'
        }
    }
}